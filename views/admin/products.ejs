<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/AdminProduct.css">
</head>
<style>
  .table-responsive {
    background: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
    margin-top: 15px;
    border: 1px solid #f0f0f0;
  }

  .table-responsive::-webkit-scrollbar {
    height: 6px;
  }
  
  .table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  .table-responsive::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 10px;
  }

  .table {
    border-collapse: separate;
    border-spacing: 0;
    font-size: 0.92rem;
    color: #444;
    margin: 0;
  }

  .table thead.table-light {
    background: #f8fafc;
    border-bottom: 2px solid #e9ecef;
  }

  .table thead th {
    color: #495057;
    border: none;
    font-weight: 600;
    font-size: 0.85rem;
    letter-spacing: 0.3px;
    padding: 16px 12px;
    text-align: center;
    vertical-align: middle;
    text-transform: uppercase;
    background: #f8fafc;
  }

  .table thead th:first-child {
    border-top-left-radius: 12px;
  }
  
  .table thead th:last-child {
    border-top-right-radius: 12px;
  }

  .table tbody tr {
    transition: all 0.2s ease;
    border-bottom: 1px solid #f0f0f0;
  }

  .table tbody tr:last-child {
    border-bottom: none;
  }

  .table tbody tr:hover {
    background-color: #f8fbff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  }

  .table tbody td {
    border: none !important;
    padding: 14px 12px;
    text-align: center;
    vertical-align: middle;
    color: #555;
  }

  .table tbody td:first-child {
    font-weight: 500;
    color: #6c757d;
  }

  .table tbody img.rounded {
    border-radius: 8px;
    border: 1px solid #f0f0f0;
    transition: transform 0.2s ease;
  }

  .table tbody img.rounded:hover {
    transform: scale(1.05);
  }

  .product-name {
    font-weight: 600;
    color: #2c3e50;
    font-size: 0.95rem;
  }

  .product-category {
    background-color: #f0f9ff !important;
    color: #0369a1 !important;
    border: 1px solid #e0f2fe;
    font-weight: 500;
    padding: 6px 10px;
    border-radius: 6px;
    font-size: 0.8rem;
  }

  .product-description {
    color: #6b7280;
    font-size: 0.85rem;
    line-height: 1.4;
    max-width: 200px;
    margin: 0 auto;
  }

  .product-price {
    color: #059669;
    font-weight: 700;
    font-size: 0.95rem;
  }

  .status-available {
    background: #f0fdf4 !important;
    color: #166534 !important;
    border: 1px solid #dcfce7;
  }

  .status-unavailable {
    background: #fef2f2 !important;
    color: #dc2626 !important;
    border: 1px solid #fecaca;
  }

  .badge {
    padding: 6px 10px;
    border-radius: 6px;
    font-weight: 500;
    font-size: 0.8rem;
  }

  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 6px;
  }

  .btn-sm {
    border-radius: 6px;
    transition: all 0.2s ease;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
  }

  .btn-edit {
    background: #3b82f6;
    border: none;
    color: white;
  }
  
  .btn-edit:hover {
    background: #2563eb;
    transform: translateY(-1px);
  }

  .btn-delete {
    background: #ef4444;
    border: none;
    color: white;
  }
  
  .btn-delete:hover {
    background: #dc2626;
    transform: translateY(-1px);
  }

  .btn-status {
    background: #f59e0b;
    border: none;
    color: white;
  }
  
  .btn-status:hover {
    background: #d97706;
    transform: translateY(-1px);
  }

  .btn-status-available {
    background: #10b981;
    border: none;
    color: white;
  }
  
  .btn-status-available:hover {
    background: #059669;
    transform: translateY(-1px);
  }

  /* Filter and Pagination Styles */
  .filter-section {
    background: #fff;
    border-radius: 12px;
    padding: 15px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
    margin-bottom: 15px;
    border: 1px solid #f0f0f0;
  }
  
  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .filter-btn {
    border-radius: 8px;
    padding: 8px 16px;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: 1px solid #e0e0e0;
    background-color: #fff;
    color: #555;
  }
  
  .filter-btn:hover {
    background-color: #f8f9fa;
    transform: translateY(-1px);
  }
  
  .filter-btn.active {
    background-color: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }
  
  .pagination-container {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }
  
  .pagination {
    margin-bottom: 0;
  }
  
  .page-link {
    border-radius: 8px;
    margin: 0 4px;
    border: 1px solid #e0e0e0;
    color: #555;
    font-weight: 500;
  }
  
  .page-link:hover {
    background-color: #f8f9fa;
    color: #3b82f6;
  }
  
  .page-item.active .page-link {
    background-color: #3b82f6;
    border-color: #3b82f6;
  }
  
  .page-item.disabled .page-link {
    color: #adb5bd;
  }

  @media (max-width: 768px) {
    .table thead {
      display: none;
    }
    
    .table tbody td {
      display: block;
      text-align: right;
      border-bottom: 1px solid #e9ecef;
      padding: 12px 15px;
    }
    
    .table tbody td::before {
      content: attr(data-label);
      float: left;
      font-weight: 600;
      color: #495057;
      text-transform: uppercase;
      font-size: 0.8rem;
    }
    
    .table tbody tr {
      margin-bottom: 1rem;
      display: block;
      border-radius: 8px;
      background: #fff;
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      padding: 10px;
    }
    
    .action-buttons {
      justify-content: flex-end;
    }
    
    .filter-buttons {
      justify-content: center;
    }
  }
</style>
<body>

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
  <div class="d-flex justify-content-center mb-5 mt-3">
    <img src="<%= settings.logo ? settings.logo : '/images/napslogo.png' %>" alt="Logo" width="150" />
  </div>
  <nav>
    <a href="/admin/index"><i class="bi bi-speedometer2"></i> Dashboard</a>
    <a href="/admin/users"><i class="bi bi-person-circle"></i> Users Profile</a>
    <a href="/admin/staff"><i class="bi bi-people-fill"></i> Account Creation</a>
    <a href="/admin/orders"><i class="bi bi-receipt"></i> Orders</a>
    <a href="/admin/reservations"><i class="bi bi-journal-bookmark"></i> Reservations</a>
    <a href="/admin/discounts"><i class="bi bi-percent"></i> Discounts</a>
    <a href="/admin/reviews"><i class="bi bi-chat-dots"></i> Users Reviews</a>
    <a href="/admin/products" class="active"><i class="bi bi-box-seam"></i> Inventory</a>
    <a href="/admin/table"><i class="bi bi-table"></i> Table</a>
    <a href="/admin/calendar"><i class="bi bi-calendar-event"></i> Calendar</a>
    <a href="/admin/settings"><i class="bi bi-gear"></i> Settings</a>
  </nav>
</div>

<!-- Main Content -->
<div class="main-content">
  <div class="navbar-custom-wrapper">
    <nav class="navbar navbar-custom sticky-top d-flex justify-content-between align-items-center">
      <div class="d-flex align-items-center">
        <img src="/images/admin-avatar.avif" alt="Admin" class="rounded-circle me-3">
        <div class="admin-info">
          <div class="fw-semibold">Super Admin</div>
          <p>napsgrillrestobar08@gmail.com</p>
        </div>
      </div>
      <a href="/logout" class="btn btn-sm btn-danger d-flex align-items-center">
        <i class="bi bi-box-arrow-right"></i>
      </a>
    </nav>
  </div>

  <div class="container-fluid px-4">
    <!-- Header + Search + Add Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2 class="mb-4 fw-bold ms-2" style="color: #333446;">Inventory</h2>
      <div class="d-flex gap-2">
        <!-- Search Bar -->
        <div class="input-group" style="width: 300px;">
          <span class="input-group-text bg-light border-0">
            <i class="bi bi-search text-muted"></i>
          </span>
          <input 
            type="text" 
            id="productSearch" 
            class="form-control border-0 shadow-sm" 
            placeholder="Search products..."
          >
        </div>
        <!-- Add Product Button -->
        <button class="btn btn-primary d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#addProductModal">
          <i class="bi bi-plus-circle me-2"></i> Add Product
        </button>
      </div>
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
      <h6 class="mb-3 fw-semibold">Filter by Category:</h6>
      <div class="filter-buttons">
        <button class="filter-btn active" data-category="all">All Products</button>
        <button class="filter-btn" data-category="seafood">Seafood</button>
        <button class="filter-btn" data-category="appetizer">Appetizer</button>
        <button class="filter-btn" data-category="meat">Meat</button>
        <button class="filter-btn" data-category="vegetable">Vegetable</button>
        <button class="filter-btn" data-category="dessert">Dessert</button>
        <button class="filter-btn" data-category="beverage">Beverage</button>
      </div>
    </div>

    <!-- Products Table -->
    <div class="table-responsive mt-4">
      <table class="table table-hover align-middle" id="productsTable">
        <thead class="table-light text-center">
          <tr>
            <th width="5%">#</th>
            <th width="12%">Image</th>
            <th width="15%">Name</th>
            <th width="12%">Category</th>
            <th width="20%">Description</th>
            <th width="10%">Price</th>
            <th width="10%">Status</th>
            <th width="16%">Actions</th>
          </tr>
        </thead>
        <tbody id="productsTableBody">
          <% products.forEach((product, index) => { %>
            <tr class="text-center" data-category="<%= product.category %>">
              <td data-label="#"><%= index + 1 %></td>
              <td data-label="Image">
                <img src="/uploads/<%= product.image %>" alt="<%= product.name %>" 
                     style="width: 50px; height: 50px; object-fit: cover;" class="rounded">
              </td>
              <td data-label="Name" class="product-name"><%= product.name %></td>
              <td data-label="Category">
                <span class="badge product-category">
                  <i class="bi bi-tags-fill me-1"></i> <%= product.category %>
                </span>
              </td>
              <td data-label="Description" class="product-description"><%= product.description %></td>
              <td data-label="Price" class="product-price">₱<%= product.price.toFixed(2) %></td>
              <td data-label="Status">
                <span class="badge <%= product.status === 'available' ? 'status-available' : 'status-unavailable' %>">
                  <%= product.status.charAt(0).toUpperCase() + product.status.slice(1) %>
                </span>
              </td>
              <td data-label="Actions">
                <div class="action-buttons">
                  <!-- Edit -->
                  <button class="btn btn-sm btn-edit" data-bs-toggle="modal" data-bs-target="#editModal-<%= product._id %>">
                    <i class="bi bi-pencil-square"></i>
                  </button>
                  <!-- Delete -->
                  <button type="button" class="btn btn-sm btn-delete delete-btn" data-id="<%= product._id %>">
                    <i class="bi bi-trash3-fill"></i>
                  </button>
                  <!-- Toggle Status -->
                  <form action="/admin/products/status/<%= product._id %>" method="POST" class="d-inline">
                    <% if (product.status === 'available') { %>
                      <button type="submit" class="btn btn-sm btn-status">
                        <i class="bi bi-x-circle"></i>
                      </button>
                    <% } else { %>
                      <button type="submit" class="btn btn-sm btn-status-available">
                        <i class="bi bi-check-circle"></i>
                      </button>
                    <% } %>
                  </form>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
      <nav aria-label="Product pagination">
        <ul class="pagination" id="pagination">
          <!-- Pagination will be generated by JavaScript -->
        </ul>
      </nav>
    </div>
  </div>
</div>

<!-- Edit Product Modals -->
<% products.forEach((product) => { %>
  <div class="modal fade" id="editModal-<%= product._id %>" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <form action="/admin/products/edit/<%= product._id %>" method="POST" enctype="multipart/form-data" class="modal-content">
        <div class="modal-header text-black justify-content-center" style="background: rgb(218, 218, 218);">
          <h5 class="modal-title w-100 text-center"><i class="bi bi-pencil-square me-2"></i>Edit Product</h5>
          <button type="button" class="btn-close" style="filter: invert(0);" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body row g-3">
          <div class="col-md-6">
            <label class="form-label"><i class="bi bi-type me-2"></i>Name</label>
            <input type="text" name="name" maxlength="30" class="form-control" value="<%= product.name %>" required>
          </div>
          <div class="col-md-6">
            <label class="form-label"><i class="bi bi-tags-fill me-2"></i>Category</label>
            <select name="category" class="form-select" required>
              <option value="seafood" <%= product.category === 'seafood' ? 'selected' : '' %>>Seafood</option>
              <option value="appetizer" <%= product.category === 'appetizer' ? 'selected' : '' %>>Appetizer</option>
              <option value="meat" <%= product.category === 'meat' ? 'selected' : '' %>>Meat</option>
              <option value="vegetable" <%= product.category === 'vegetable' ? 'selected' : '' %>>Vegetable</option>
              <option value="dessert" <%= product.category === 'dessert' ? 'selected' : '' %>>Dessert</option>
              <option value="beverage" <%= product.category === 'beverage' ? 'selected' : '' %>>Beverage</option>
            </select>
          </div>
          <div class="col-md-6">
            <label class="form-label"><i class="fa-solid fa-peso-sign me-2"></i>Price</label>
           <input type="number" name="price" class="form-control" value="<%= product.price %>" min="1" maxlength="100000" required oninput="this.value = Math.abs(this.value)">

          </div>
          <div class="col-md-6">
            <label class="form-label"><i class="bi bi-toggle-on me-2"></i>Status</label>
            <select name="status" class="form-select" required>
              <option value="available" <%= product.status === 'available' ? 'selected' : '' %>>Available</option>
              <option value="unavailable" <%= product.status === 'unavailable' ? 'selected' : '' %>>Unavailable</option>
            </select>
          </div>
          <div class="col-md-12">
            <label class="form-label"><i class="bi bi-image-fill me-2"></i>Change Image (optional)</label>
            <input type="file" name="image" class="form-control">
          </div>
          <div class="col-12">
            <label class="form-label"><i class="bi bi-card-text me-2"></i>Description</label>
            <textarea name="description" maxlength="100" class="form-control" required><%= product.description %></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn text-white" style="background: #3b82f6;">
            <i class="bi bi-check-circle me-2"></i>Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
<% }) %>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <form action="/admin/products/add" method="POST" enctype="multipart/form-data" class="modal-content">
      
      <!-- Modal Header -->
      <div class="modal-header text-black justify-content-center" style="background: rgb(218, 218, 218);">
        <h5 class="modal-title text-center w-100">
          <i class="bi bi-plus-circle me-2"></i> Add Product
        </h5>
        <button type="button" class="btn-close" style="filter: invert(0);" data-bs-dismiss="modal"></button>
      </div>

      <!-- Modal Body -->
      <div class="modal-body row g-3">
        <div class="col-md-6">
          <label class="form-label"><i class="bi bi-type me-2"></i>Name</label>
          <input type="text" name="name" class="form-control" maxlength="30" placeholder="Enter product name" required>
        </div>

        <div class="col-md-6">
          <label class="form-label"><i class="bi bi-tags-fill me-2"></i>Category</label>
          <select name="category" class="form-select" required>
            <option value="" disabled selected>Select category</option>
            <option value="seafood">Seafood</option>
            <option value="appetizer">Appetizer</option>
            <option value="meat">Meat</option>
            <option value="vegetable">Vegetable</option>
            <option value="dessert">Dessert</option>
            <option value="beverage">Beverage</option>
          </select>
        </div>

        <div class="col-md-6">
          <label class="form-label"><i class="fa-solid fa-peso-sign me-2"></i>Price</label>
          <input type="number" name="price" class="form-control" placeholder="Enter price" min="0" required oninput="this.value = Math.abs(this.value)" >
        </div>

        <div class="col-md-6">
          <label class="form-label"><i class="bi bi-toggle-on me-2"></i>Status</label>
          <select name="status" class="form-select" required>
            <option value="available">Available</option>
            <option value="unavailable">Unavailable</option>
          </select>
        </div>

        <div class="col-md-12">
          <label class="form-label"><i class="bi bi-image-fill me-2"></i>Upload Image</label>
          <input type="file" name="image" class="form-control" accept="image/*" required>
        </div>

        <div class="col-12">
          <label class="form-label"><i class="bi bi-card-text me-2"></i>Description</label>
          <textarea name="description" maxlength="100" class="form-control" placeholder="Enter description" required></textarea>
        </div>
      </div>

      <!-- Modal Footer -->
      <div class="modal-footer">
        <button type="submit" class="btn text-white" style="background: #3b82f6;">
          <i class="bi bi-check-circle me-2"></i> Save Product
        </button>
      </div>

    </form>
  </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Alerts -->
<% if (success) { %>
  <script>
    Swal.fire({ icon: 'success', title: 'Success', text: "<%= success %>", timer: 2000, showConfirmButton: false });
  </script>
<% } %>
<% if (editSuccess) { %>
  <script>
    Swal.fire({ icon: 'success', title: 'Product Updated', text: "<%= editSuccess %>", timer: 2000, showConfirmButton: false });
  </script>
<% } %>
<% if (error) { %>
  <script>
    Swal.fire({ icon: 'error', title: 'Error', text: "<%= error %>" });
  </script>
<% } %>

<!-- Delete + Search + Filtering + Pagination -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Delete Confirmation
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', function () {
        const productId = this.getAttribute('data-id');
        Swal.fire({
          title: 'Are you sure?',
          text: "This product will be permanently deleted.",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!',
          reverseButtons: true
        }).then((result) => {
          if (result.isConfirmed) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/admin/products/delete/${productId}`;
            document.body.appendChild(form);
            form.submit();
          }
        });
      });
    });

    // Table Search
    const searchInput = document.getElementById("productSearch");
    const rows = document.querySelectorAll("#productsTable tbody tr");

    searchInput.addEventListener("keyup", function () {
      const query = this.value.toLowerCase();
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(query) ? "" : "none";
      });
    });
  });
  
  document.addEventListener("DOMContentLoaded", () => {
    const addProductForm = document.querySelector('#addProductModal form');
    if (!addProductForm) return;

    // Get all existing product names (converted to lowercase for case-insensitive comparison)
    const existingProducts = JSON.parse('<%- JSON.stringify(products.map(p => p.name.toLowerCase())) %>');

    addProductForm.addEventListener("submit", (e) => {
      const nameInput = addProductForm.querySelector('input[name="name"]');
      const enteredName = nameInput.value.trim().toLowerCase();

      if (existingProducts.includes(enteredName)) {
        e.preventDefault(); // Stop form submission
        Swal.fire({
          icon: 'warning',
          title: 'Duplicate Product Name',
          text: 'A product with this name already exists!',
          confirmButtonColor: '#3b82f6'
        });
      }
    });
  });

  // Filtering and Pagination
  document.addEventListener('DOMContentLoaded', function() {
    const tableBody = document.getElementById('productsTableBody');
    const rows = Array.from(tableBody.querySelectorAll('tr'));
    const filterButtons = document.querySelectorAll('.filter-btn');
    const searchInput = document.getElementById('productSearch');
    const paginationContainer = document.getElementById('pagination');
    
    // Pagination variables
    const itemsPerPage = 10;
    let currentPage = 1;
    let currentCategory = 'all';
    let filteredRows = [...rows];
    
    // Create persistent "No product found" row
    const noProductRow = document.createElement('tr');
    noProductRow.id = 'noProductRow';
    noProductRow.innerHTML = `
      <td colspan="8" class="text-center text-muted py-3">No product found</td>
    `;
    noProductRow.style.display = 'none';
    tableBody.appendChild(noProductRow);
    
    // Filter by category
    function filterByCategory(category) {
      currentCategory = category;
      currentPage = 1; // Reset to first page when changing filter
      
      if (category === 'all') {
        filteredRows = [...rows];
      } else {
        filteredRows = rows.filter(row => row.getAttribute('data-category') === category);
      }
      
      // Apply search filter if there's a search query
      applySearchFilter();
      
      // Update pagination
      updatePagination();
      
      // Render current page
      renderCurrentPage();
    }
    
    // Apply search filter
    function applySearchFilter() {
      const searchValue = searchInput.value.toLowerCase().trim();
      
      if (searchValue) {
        filteredRows = filteredRows.filter(row => {
          const name = row.querySelector('.product-name')?.textContent.toLowerCase() || '';
          const category = row.querySelector('.product-category')?.textContent.toLowerCase() || '';
          const description = row.querySelector('.product-description')?.textContent.toLowerCase() || '';
          
          return name.includes(searchValue) || category.includes(searchValue) || description.includes(searchValue);
        });
      }
    }
    
    // Update pagination
    function updatePagination() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      paginationContainer.innerHTML = '';
      
      if (totalPages <= 1) {
        return;
      }
      
      // Previous button
      const prevLi = document.createElement('li');
      prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
      prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>`;
      prevLi.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage > 1) {
          currentPage--;
          renderCurrentPage();
          updatePagination();
        }
      });
      paginationContainer.appendChild(prevLi);
      
      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        const pageLi = document.createElement('li');
        pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
        pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
        pageLi.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = i;
          renderCurrentPage();
          updatePagination();
        });
        paginationContainer.appendChild(pageLi);
      }
      
      // Next button
      const nextLi = document.createElement('li');
      nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
      nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>`;
      nextLi.addEventListener('click', (e) => {
        e.preventDefault();
        if (currentPage < totalPages) {
          currentPage++;
          renderCurrentPage();
          updatePagination();
        }
      });
      paginationContainer.appendChild(nextLi);
    }
    
    // Render current page
    function renderCurrentPage() {
      // Hide all rows
      rows.forEach(row => row.style.display = 'none');
      
      // Show rows for current page
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const rowsToShow = filteredRows.slice(startIndex, endIndex);
      
      rowsToShow.forEach(row => {
        row.style.display = '';
      });
      
      // Show/hide no product row
      if (filteredRows.length === 0) {
        noProductRow.style.display = '';
      } else {
        noProductRow.style.display = 'none';
      }
      
      // Update row numbers
      rowsToShow.forEach((row, index) => {
        const rowNumberCell = row.querySelector('td:first-child');
        if (rowNumberCell) {
          rowNumberCell.textContent = startIndex + index + 1;
        }
      });
    }
    
    // Event listeners for filter buttons
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Filter by category
        const category = this.getAttribute('data-category');
        filterByCategory(category);
      });
    });
    
    // Event listener for search input
    searchInput.addEventListener('input', function() {
      // Reset to first page when searching
      currentPage = 1;
      
      // Apply filters
      filterByCategory(currentCategory);
    });
    
    // Initialize
    filterByCategory('all');
  });
</script>
<script>
  /* ---------- PRODUCT NAME: only letters and spaces ---------- */
  document.querySelectorAll('input[name="name"]').forEach(input => {
    input.addEventListener('input', function () {
      const regex = /^[A-Za-z\s]*$/;
      let value = this.value;

      // Allow only letters and spaces
      if (!regex.test(value)) {
        this.value = value.replace(/[^A-Za-z\s]/g, '');
        Swal.fire({
          icon: 'warning',
          title: 'Invalid Input',
          text: 'Product name can only contain letters and spaces.',
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
        return;
      }

      // Prevent input with only spaces
      if (value.trim() === '' && value.length > 0) {
        this.value = '';
        Swal.fire({
          icon: 'warning',
          title: 'Invalid Input',
          text: 'Product name cannot contain only spaces.',
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
        return;
      }

      // SweetAlert for reaching maxlength
      const maxLength = parseInt(this.getAttribute('maxlength'));
      if (value.length === maxLength) {
        Swal.fire({
          icon: 'info',
          title: 'Maximum Length Reached',
          text: `Product name cannot exceed ${maxLength} characters.`,
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
      }
    });
  });

  /* ---------- DESCRIPTION: SweetAlert for max length ---------- */
  document.querySelectorAll('textarea[name="description"]').forEach(textarea => {
    textarea.addEventListener('input', function () {
      const maxLength = parseInt(this.getAttribute('maxlength'));
      if (this.value.length === maxLength) {
        Swal.fire({
          icon: 'info',
          title: 'Maximum Length Reached',
          text: `Description cannot exceed ${maxLength} characters.`,
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
      }
    });
  });

  /* ---------- PRICE: only numbers, min = 1, max = 5 digits ---------- */
  document.querySelectorAll('input[name="price"]').forEach(input => {
    input.addEventListener('input', function () {
      let value = this.value.replace(/[^0-9]/g, ''); // Only numbers
      this.value = value;

      // Minimum price check
      if (value !== '' && parseInt(value) < 1) {
        this.value = 1;
        Swal.fire({
          icon: 'warning',
          title: 'Invalid Price',
          text: 'Price must be at least 1.',
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
      }

      // Maximum 5 digits
      if (value.length > 5) {
        this.value = value.slice(0, 5);
        Swal.fire({
          icon: 'info',
          title: 'Maximum Limit Reached',
          text: 'Price cannot exceed 5 digits (99999).',
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
      }
    });
  });

  document.querySelectorAll('input[type="file"][name="image"]').forEach(fileInput => {
    fileInput.addEventListener('change', function () {
      const file = this.files[0];
      if (!file) return;

      const allowedTypes = ['image/jpeg', 'image/png'];
      if (!allowedTypes.includes(file.type)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid File Type',
          text: 'Only JPG and PNG image formats are allowed.',
          timer: 1500,
          showConfirmButton: false,
          timerProgressBar: true,
          position: 'center'
        });
        this.value = '';
      }
    });
  });
</script>
</body>
</html>