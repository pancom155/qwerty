<<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Staff Dashboard | Orders</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/StaffOrder.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<style>
     /* Hover effect for sidebar users */
  .user-item:hover {
    background: #f5f5f5;
  }

  /* Scrollbar for chat box */
  .chat-box::-webkit-scrollbar {
    width: 6px;
  }
  .chat-box::-webkit-scrollbar-track {
    background: #f0f2f5;
  }
  .chat-box::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 3px;
  }
</style>
<body>

<div class="sidebar" id="sidebar">
  <div class="d-flex justify-content-center mb-5 mt-3">
    <img src="<%= settings.logo ? settings.logo : '/images/napslogo.png' %>" alt="Logo" width="150" />
  </div>
  <nav>
 <a href="/staff/index"><i class="bi bi-speedometer2"></i> Dashboard</a>
<a href="/staff/order"><i class="bi bi-cart-check"></i> Orders</a>
<a href="/staff/order_done"><i class="bi bi-receipt"></i> Order Receipt</a>
<a href="/staff/reservation"><i class="bi bi-journal-bookmark"></i> Reservation</a>
<a href="/staff/calendar" ><i class="bi bi-calendar-event"></i> Calendar</a>
<a href="/staff/chat" class="active"><i class="bi bi-chat-dots"></i> Customer Concern</a>
</nav>

  
</div>

<div class="main-content">
   <div class="navbar-custom-wrapper">
    <nav class="navbar navbar-custom d-flex justify-content-between align-items-center">
      <div class="d-flex align-items-center">
        <img src="/images/admin-avatar.avif" alt="Admin" class="rounded-circle me-3">
        <div class="admin-info">
          <div class="fw-semibold mb-1"><%= user.fullName %></div>
          <p><%= user.email %></p>
        </div>
      </div>

      <div class="d-flex align-items-center">
        <!-- Notification Container -->
        <div class="notification-container me-3">
          <button class="btn btn-outline-secondary position-relative" id="notificationBtn">
            <i class="bi bi-bell"></i>
            <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
          </button>
          
          <!-- Notification Dropdown -->
          <div class="notification-dropdown" id="notificationDropdown">
            <h6 class="mb-3">Recent Notifications</h6>
            <div id="notificationList">
              <!-- Notifications will be added here dynamically -->
            </div>
          
          </div>
        </div>
        
        <a href="/logout" class="btn btn-sm btn-danger d-flex align-items-center">
          <i class="bi bi-box-arrow-right"></i> Logout
        </a>
      </div>
    </nav>
  </div>
<div class="d-flex justify-content-between align-items-center p-3">
  <h5 style="margin:0; font-weight:600; color:#222;"></h5>
  <button id="addChatBtn" class="btn btn-sm"
          style="background:linear-gradient(90deg,#0047FF,#03C4E7);
                 color:#fff; border:none; border-radius:25px;
                 padding:8px 18px; font-weight:500;
                 display:flex; align-items:center; gap:6px;
                 box-shadow:0 3px 6px rgba(0,0,0,0.15);
                 transition:all 0.3s ease;">
    <i class="bi bi-chat-square-text" style="font-size:16px;"></i>
    <span>Add Chat</span>
  </button>
</div>


<div class="modal fade" id="addChatModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg rounded-4">
      <div class="modal-header bg-primary text-white rounded-top-4">
        <h5 class="modal-title fw-semibold">
          <i class="bi bi-chat-dots me-2"></i> Start New Chat
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form id="addChatForm">
        <div class="modal-body">
          <div class="mb-3">
            <label for="chatEmail" class="form-label fw-semibold">User Email</label>
            <input
              type="email"
              id="chatEmail"
              name="email"
              class="form-control border-primary-subtle"
              placeholder="Enter user email"
              required
            />
          </div>

          <div class="mb-3">
            <label for="chatMessage" class="form-label fw-semibold">Message</label>
            <textarea
              id="chatMessage"
              name="message"
              maxlength="100"
              class="form-control border-primary-subtle"
              placeholder="Type your message..."
              required
            ></textarea>
            <small class="text-muted">Max 100 characters</small>
          </div>
        </div>

        <div class="modal-footer bg-light border-0">
          <button type="submit" class="btn btn-primary px-4">
            <i class="bi bi-send"></i> Send
          </button>
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">
            <i class="bi bi-x-circle"></i> Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>




<div class="d-flex" style="height:90vh; max-height:980px; margin-top:10px; font-family:'Poppins', sans-serif; background:#f8f9fb;">

  <% if (chats.length === 0) { %>
    <!-- Empty State (No Chats at All) -->
    <div style="flex:1; display:flex; flex-direction:column; justify-content:center; align-items:center; text-align:center; color:#777;">
      <i class="bi bi-chat-dots" style="font-size:50px; color:#0047FF; margin-bottom:15px;"></i>
      <h5 style="margin-bottom:10px; font-weight:600; color:#333;">No chat available</h5>
   
    </div>
  <% } else { %>
    <!-- Sidebar: Users List -->
    <div class="users-sidebar" style="width:250px; border-right:1px solid #ddd; overflow-y:auto; background:#fff; border-radius:12px 0 0 12px; box-shadow:2px 0 6px rgba(0,0,0,0.05);">
      <h5 class="p-3 mb-0" style="background:linear-gradient(90deg,#0047FF); color:#fff; margin:0; border-radius:12px 0 0 0; font-weight:600; letter-spacing:0.5px;">Users</h5>
      <% chats.forEach((chat, index) => { 
          const userMsg = chat.messages.slice().reverse().find(msg => msg.email && !msg.email.includes('staff.com'));
          const displayEmail = userMsg ? userMsg.email : (chat.userEmail || 'Unknown'); 
      %>
        <div class="user-item d-flex align-items-center p-3 user-select-none" 
             style="cursor:pointer; border-bottom:1px solid #f0f0f0; transition:0.25s; background:#fff;"
             onmouseover="this.style.background='#f7f9fc'" onmouseout="this.style.background='#fff'"
             data-chat-index="<%= index %>">
          <div class="user-icon me-2" 
               style="width:42px; height:42px; border-radius:50%; background:linear-gradient(135deg,#03C4E7,#0047FF); display:flex; align-items:center; justify-content:center; font-size:18px; color:#fff; flex-shrink:0;">
            <i class="bi bi-person-fill"></i>
          </div>
          <div class="user-info">
            <div style="font-weight:600; font-size:14px; color:#222;"><%= displayEmail.split('@')[0] %></div>
            <small style="color:#777; font-size:12px;"><%= displayEmail %></small>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Chat View -->
    <div class="chat-view flex-grow-1 d-flex flex-column" 
         style="border-radius:0 12px 12px 0; background:#f0f2f5; margin:0 20px 0 1px; box-shadow:inset 0 0 8px rgba(0,0,0,0.03);">
      
      <% chats.forEach((chat, index) => { %>
        <div class="chat-container mb-0 chat-panel" 
             data-chat-index="<%= index %>" 
             style="display:<%= index === 0 ? 'flex' : 'none' %>; flex-direction:column; flex:1; overflow:hidden;">
          
          <!-- Header -->
          <%
            const userMessage = chat.messages.find(msg => msg.email && !msg.email.includes('staff.com'));
            const displayEmail = userMessage ? userMessage.email : (chat.userId && chat.userId.email ? chat.userId.email : 'Unknown User');
          %>
          <div style="display:flex; justify-content:space-between; align-items:center; background:linear-gradient(90deg,#0047FF,#03C4E7); color:#fff; padding:14px 18px; box-shadow:0 2px 6px rgba(0,0,0,0.15); border-radius:0 12px 0 0;">
            <h5 style="margin:0; font-weight:600; font-size:16px; letter-spacing:0.3px;">
              Chat with: <%= displayEmail %>
            </h5>
            <button class="btn btn-sm btn-danger delete-chat-btn" data-chat-id="<%= chat._id %>" style="border-radius:50px; padding:5px 12px;">
              <i class="bi bi-trash"></i> Delete
            </button>
          </div>

<!-- Messages -->
<div class="chat-box flex-grow-1 p-3"
     id="chatBox-<%= chat._id %>"
     data-chat-id="<%= chat._id %>"
     style="overflow-y:auto; display:flex; flex-direction:column; gap:12px; scrollbar-width:thin; scrollbar-color:#ccc transparent; background:#f9fafc;">
  <% if (chat.messages.length === 0) { %>
    <div style="text-align:center; color:#777; font-size:14px; margin-top:20px;">
      <i class="bi bi-chat-dots" style="font-size:35px; color:#0047FF; display:block; margin-bottom:10px;"></i>
      <p>No messages yet</p>
    </div>
  <% } else { %>
   <% chat.messages.forEach(msg => { %>
  <div class="message <%= msg.sender === 'user' ? 'user-message' : 'staff-message' %>" 
       style="max-width:70%; padding:12px 16px; border-radius:20px; word-wrap:break-word; display:inline-block; box-shadow:0 2px 6px rgba(0,0,0,0.08); font-size:14px; line-height:1.4;
         <%= msg.sender === 'user' 
              ? 'background:#fff; color:#222; align-self:flex-start; border-top-left-radius:6px;' 
              : 'background:#0047FF; color:#fff; align-self:flex-end; border-top-right-radius:6px;' %>">
    
    <div class="sender-email" style="font-size:11px; font-weight:600; margin-bottom:6px; opacity:0.8;">
      <%= msg.email || 'No Email' %>
    </div>

    <% if(msg.message) { %>
      <div><%= msg.message %></div>
    <% } %>

    <% if(msg.image) { %>
      <div style="margin-top:6px;">
        <img src="<%= msg.image %>" 
             alt="Message Image" 
             class="chat-image"
             style="width:220px; height:220px; object-fit:cover; border-radius:12px; cursor:pointer; box-shadow:0 2px 5px rgba(0,0,0,0.1);">
      </div>
    <% } %>
  </div>
<% }) %>

  <% } %>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content" style="border-radius:12px; overflow:hidden;">
      <div class="modal-body p-0">
        <img id="modalImage" src="" alt="Preview" style="width:100%; height:auto; display:block;">
      </div>
    </div>
  </div>
</div>


<!-- Chat Input -->
<form class="chat-input d-flex p-3" action="/staff/chat/send" method="POST" enctype="multipart/form-data"
      style="border-top:1px solid #ddd; background:#fff; display:flex; align-items:center; gap:8px;">
  <input type="hidden" name="userId" value="<%= chat.userId %>">

  <!-- Text message (optional) -->
  <input type="text" name="message" class="form-control me-2" maxlength="100" placeholder="Type a message..." 
         style="border-radius:25px; padding:10px 16px; font-size:14px; box-shadow:inset 0 2px 4px rgba(0,0,0,0.05); border:1px solid #ddd;">

  <!-- Image upload -->
  <input type="file" name="image" accept="image/*" class="form-control me-2"
         style="max-width:200px; border-radius:25px; font-size:13px;">

  <!-- Send button -->
  <button type="submit" class="btn btn-primary" 
          style="border-radius:25px; padding:8px 22px; font-weight:500; box-shadow:0 3px 6px rgba(0,0,0,0.15); background:linear-gradient(90deg,#0047FF,#03C4E7); border:none;">
    Send
  </button>
</form>


        </div>
      <% }) %>
    </div>
  <% } %>

</div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  /** ---------------- IMAGE MODAL ---------------- */
  const modalEl = document.getElementById("imageModal");
  const modalImg = document.getElementById("modalImage");
  if (modalEl && modalImg) {
    const bsModal = new bootstrap.Modal(modalEl);
    document.querySelectorAll(".chat-image").forEach(img => {
      img.addEventListener("click", () => {
        modalImg.src = img.src;
        bsModal.show();
      });
    });
  }

  /** ---------------- ADD CHAT ---------------- */
  const addChatBtn = document.getElementById("addChatBtn");
  const addChatModalEl = document.getElementById("addChatModal");
  const addChatForm = document.getElementById("addChatForm");
  const addChatModal = new bootstrap.Modal(addChatModalEl);

  if (addChatBtn && addChatForm) {
    addChatBtn.addEventListener("click", () => addChatModal.show());

    addChatForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const email = document.getElementById("chatEmail").value.trim();
      const message = document.getElementById("chatMessage").value.trim();

      if (!email || !message) return;

      try {
        const res = await fetch("/staff/chat/add", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, message })
        });

        const data = await res.json();
        if (res.ok && data.success) {
          addChatModal.hide();
          Swal.fire({
            title: "Success",
            text: "Chat started!",
            icon: "success",
            confirmButtonText: "OK"
          }).then(() => window.location.reload());
        } else {
          Swal.fire("Error", data?.message || "Unexpected response", "error");
        }
      } catch (err) {
        Swal.fire("Error", err.message || "Something went wrong", "error");
      }
    });
  }

  /** ---------------- SIDEBAR CLICK LOGIC ---------------- */
  function attachSidebarLogic() {
    const userItems = document.querySelectorAll(".user-item");
    const chatPanels = document.querySelectorAll(".chat-panel");

    if (!userItems.length) return;
    userItems.forEach(item => {
      item.onclick = () => {
        const index = item.getAttribute("data-chat-index");
        chatPanels.forEach(panel => {
          panel.style.display = panel.getAttribute("data-chat-index") === index ? "flex" : "none";
        });
        const activeBox = document.querySelector(`.chat-panel[data-chat-index="${index}"] .chat-box`);
        if (activeBox) activeBox.scrollTop = activeBox.scrollHeight;
      };
    });
  }
  attachSidebarLogic();

  /** ---------------- DELETE CHAT ---------------- */
  document.querySelectorAll(".delete-chat-btn").forEach(btn => {
    btn.addEventListener("click", async () => {
      const chatId = btn.getAttribute("data-chat-id");
      Swal.fire({
        title: "Are you sure?",
        text: "This chat will be permanently deleted!",
        icon: "warning",
        showCancelButton: true
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const res = await fetch(`/staff/chat/${chatId}`, { method: "DELETE" });
            const data = await res.json();
            if (data.success) {
              Swal.fire("Deleted!", "Chat has been deleted.", "success").then(() => {
                location.reload();
              });
            } else {
              Swal.fire("Error", data.message, "error");
            }
          } catch (err) {
            Swal.fire("Error", "Something went wrong", "error");
          }
        }
      });
    });
  });

  /** ---------------- AUTO-REFRESH ACTIVE CHAT ---------------- */
  const chatPanels = document.querySelectorAll('.chat-panel');
  let activeChatId = chatPanels[0]?.dataset.chatId; // default to first chat

  // Switch active chat when user clicks a sidebar item
  document.querySelectorAll('.user-item').forEach((item, index) => {
    item.addEventListener('click', () => {
      chatPanels.forEach(panel => panel.style.display = 'none');
      chatPanels[index].style.display = 'flex';
      activeChatId = chatPanels[index].dataset.chatId;
    });
  });

 const chatBox = document.getElementById('chatBox'); // Your chat container

async function fetchMessages() {
  try {
    const res = await fetch('/user/customer_support/messages');
    if (!res.ok) throw new Error('Failed to fetch');
    
    const chats = await res.json();
    if (!Array.isArray(chats) || chats.length === 0) return;

    // Combine all messages from all chat sessions
    const allMessages = chats.flatMap(chat => chat.messages);
    allMessages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    // Clear and rebuild the message box
    chatBox.innerHTML = '';
    allMessages.forEach(msg => {
      const msgDiv = document.createElement('div');
      msgDiv.className = `d-flex mb-2 ${msg.sender === 'user' ? 'justify-content-end flex-row-reverse' : 'justify-content-start'} align-items-end`;

      const profileIcon = document.createElement('div');
      profileIcon.className = 'profile-icon ms-2';
      profileIcon.innerHTML = `<i class="bi bi-person-circle fs-4 ${msg.sender === 'staff' ? 'text-primary' : 'text-success'}"></i>`;

      const bubble = document.createElement('div');
      bubble.className = `message ${msg.sender === 'user' ? 'user-message' : 'staff-message'} shadow-sm`;
      bubble.innerHTML = `
        <div class="sender-email">${msg.email}</div>
        ${msg.message ? `<div class="message-text">${msg.message}</div>` : ''}
        ${msg.image ? `<img src="${msg.image}" alt="sent image" style="max-width:200px; border-radius:8px; margin-top:5px; display:block;">` : ''}
        <div class="message-time">${msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute:'2-digit' }) : ''}</div>
      `;

      msgDiv.appendChild(profileIcon);
      msgDiv.appendChild(bubble);
      chatBox.appendChild(msgDiv);
    });

    chatBox.scrollTop = chatBox.scrollHeight;
  } catch (err) {
    console.error('Error fetching messages:', err);
  }
}

// Poll every 5 seconds
setInterval(fetchMessages, 5000);
fetchMessages();
  /** ---------------- NOTIFICATIONS ---------------- */
  const notificationBtn = document.getElementById("notificationBtn");
  const notificationDropdown = document.getElementById("notificationDropdown");
  const notificationBadge = document.getElementById("notificationBadge");
  const notificationList = document.getElementById("notificationList");
  let pendingCount = 0;

  function updateBadge() {
    if (!notificationBadge) return;
    if (pendingCount > 0) {
      notificationBadge.textContent = pendingCount;
      notificationBadge.style.display = "flex";
    } else {
      notificationBadge.style.display = "none";
    }
  }

  function checkEmpty() {
    if (!notificationList) return;
    const hasItems = notificationList.querySelectorAll(".notification-item").length > 0;
    if (!hasItems) {
      if (!notificationList.querySelector(".notification-empty")) {
        const emptyMsg = document.createElement("div");
        emptyMsg.className = "notification-empty text-center text-muted";
        emptyMsg.textContent = "No Notifications";
        notificationList.appendChild(emptyMsg);
      }
    } else {
      const emptyMsg = notificationList.querySelector(".notification-empty");
      if (emptyMsg) emptyMsg.remove();
    }
  }

  async function loadPendingOrders() {
    try {
      const res = await fetch("/staff/pending-orders");
      const data = await res.json();
      const orders = data.pendingOrders || [];
      const reservations = data.pendingReservations || [];

      if (!notificationList) return;

      function createNotificationItem(type, item) {
        const userName = item.userId ? `${item.userId.firstName} ${item.userId.lastName}` : item.fullName || "Guest";
        const time = new Date(item.createdAt).toLocaleTimeString("en-PH", { hour12: true });
        const div = document.createElement("div");
        div.className = "notification-item";
        div.innerHTML = `
          <div class="notification-title">${type}</div>
          <div class="notification-message">${
            type === "New Order"
              ? `Order #${item._id} by ${userName}`
              : `Reservation #${item._id} by ${userName}`
          }</div>
          <div class="notification-time">${time}</div>
        `;
        div.onclick = () => window.location.href = type === "New Order" ? "/staff/order" : "/staff/reservation";
        return div;
      }

      orders.forEach(order => notificationList.prepend(createNotificationItem("New Order", order)));
      reservations.forEach(res => notificationList.prepend(createNotificationItem("New Reservation", res)));

      pendingCount = orders.length + reservations.length;
      updateBadge();
      checkEmpty();
    } catch (err) {
      console.error("Error fetching pending orders/reservations:", err);
    }
  }
  loadPendingOrders();

  if (notificationBtn && notificationDropdown) {
    notificationBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      notificationDropdown.style.display = notificationDropdown.style.display === "block" ? "none" : "block";
    });

    document.addEventListener("click", (e) => {
      if (!notificationDropdown.contains(e.target) && e.target !== notificationBtn) {
        notificationDropdown.style.display = "none";
      }
    });
  }

  /** ---------------- SOCKET.IO ---------------- */
  const socket = io();
  socket.on("newOrder", (data) => {
    if (!notificationList) return;
    const emptyMsg = notificationList.querySelector(".notification-empty");
    if (emptyMsg) emptyMsg.remove();

    const div = document.createElement("div");
    div.className = "notification-item new-notification";
    div.innerHTML = `
      <div class="notification-title">${data.title}</div>
      <div class="notification-message">${data.message}</div>
      <div class="notification-time">${data.time}</div>
    `;
    div.onclick = () => window.location.href = "/staff/order";
    notificationList.prepend(div);

    pendingCount += 1;
    updateBadge();
    setTimeout(() => div.classList.remove("new-notification"), 500);
  });
});


</script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  /** ---- Max Character Limit Alert ---- **/

  // For Add Chat Modal textarea
  const chatMessage = document.getElementById("chatMessage");
  if (chatMessage) {
    chatMessage.addEventListener("input", () => {
      if (chatMessage.value.length >= chatMessage.maxLength) {
        Swal.fire({
          icon: "warning",
          title: "Character Limit Reached",
          text: `You’ve reached the maximum limit of ${chatMessage.maxLength} characters.`,
          showConfirmButton: false,
          timer: 1500
        });
      }
    });
  }

  // For all message input fields in chat panels
  document.querySelectorAll('input[name="message"]').forEach(input => {
    input.addEventListener("input", () => {
      if (input.value.length >= input.maxLength) {
        Swal.fire({
          icon: "warning",
          title: "Character Limit Reached",
          text: `You’ve reached the maximum limit of ${input.maxLength} characters.`,
          showConfirmButton: false,
          timer: 1500
        });
      }
    });
  });

  /** ---- Image File Validation (Allow JPG & PNG only) ---- **/
  document.querySelectorAll('input[type="file"][name="image"]').forEach(fileInput => {
    fileInput.addEventListener("change", () => {
      const file = fileInput.files[0];
      if (!file) return;

      const validTypes = ["image/jpeg", "image/png"];
      if (!validTypes.includes(file.type)) {
        Swal.fire({
          icon: "error",
          title: "Invalid File Type",
          text: "Only JPG and PNG image formats are allowed.",
          showConfirmButton: false,
          timer: 1500
        });
        fileInput.value = ""; // clear invalid file
      }
    });
  });
});
</script>




</body>
</html>
